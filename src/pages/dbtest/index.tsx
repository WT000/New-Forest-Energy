// @ts-nocheck
import { getServerSession } from "../../hooks/getServerSession";
import Head from "next/head";
import { authOptions } from "../api/auth/[...nextauth]";
import { useSession } from "../../hooks/useSession";
import { UserInterface } from "../../db/models/User";
import { HomeInterface } from "../../db/models/Home";
import getRole from "../../lib/utils/getRole";
import mongoose from "mongoose";

export default function Home() {
    const { data: session } = useSession();

    // Automatically becomes the users home for testing
    const fakeOwnHome = {
        _id: "",
        owner: session ? session.user.id : "123",
        delegates: [],
        name: "home",
        description: "desc",
        image: "imgpath",
        numBeds: 5,
        energyInstructions: "instructions",
        energyTariff: 1.00,
        energyBuffer: 1.00,
        createdAt: new Date(),
        updatedAt: new Date(),
    }

    const fakeDelegate = {
        _id: "",
        owner: "123",
        delegates: [session?.user.id],
        name: "home",
        description: "desc",
        image: "imgpath",
        numBeds: 5,
        energyInstructions: "instructions",
        energyTariff: 1.00,
        energyBuffer: 1.00,
        createdAt: new Date(),
        updatedAt: new Date(),
    }

    const fakeOther = {
        _id: "",
        owner: "123",
        delegates: [],
        name: "home",
        description: "desc",
        image: "imgpath",
        numBeds: 5,
        energyInstructions: "instructions",
        energyTariff: 1.00,
        energyBuffer: 1.00,
        createdAt: new Date(),
        updatedAt: new Date(),
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {session && 
                <div>
                    <p>Logged in as {session.user.name}.</p>
                    <p>Role status (own home if logged in): {getRole(session, fakeOwnHome)}</p>
                    <p>Role status (delegate test): {getRole(session, fakeDelegate)}</p>
                    <p>Role status (other home): {getRole(session, fakeOther)}</p>

                    <br/>
                    <a href="./api/auth/signout">Click here to logout.</a>
                </div>
            }

            {!session && 
                <div>
                    <p>Logged out.</p>
                    <p>Role status (own home if logged in): {getRole(session, fakeOwnHome)}</p>
                    <p>Role status (delegate test): {getRole(session, fakeDelegate)}</p>
                    <p>Role status (other home): {getRole(session, fakeOther)}</p>

                    <br/>
                    <a href="./api/auth/signin">Click here to login.</a>
                </div>
            }

            <br/>
            <a href="./api/toggleagency">Click here to toggle isAgency (would need something like axios if using fetch).</a>
            
            <br/><br/>
            <a href="./homes/63f7ded31180b041ab90d191">Click here for test readings.</a>
        </>
    );
}

// Server-side session is ideal, otherwise we will have flashing components on the page
// Using getServerSideProps as shown in official docs, but feel free to change it
export async function getServerSideProps(context) {
    return {
        props: {
            session: await getServerSession(context.req, context.res, authOptions),
        },
    };
}